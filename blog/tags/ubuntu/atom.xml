<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Ubuntu | Ry0 Note]]></title>
  <link href="http://ry0.github.io/blog/tags/ubuntu/atom.xml" rel="self"/>
  <link href="http://ry0.github.io/"/>
  <updated>2019-10-20T02:14:29+09:00</updated>
  <id>http://ry0.github.io/</id>
  <author>
    <name><![CDATA[Ry0_Ka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[UbuntuでHDDのマウントポイントを固定する方法]]></title>
    <link href="http://ry0.github.io/blog/2016/06/27/how-to-fix-mount-of-hdd-in-ubuntu/"/>
    <updated>2016-06-27T05:15:21+09:00</updated>
    <id>http://ry0.github.io/blog/2016/06/27/how-to-fix-mount-of-hdd-in-ubuntu</id>
    <content type="html"><![CDATA[<h2>HDDを一新する機会があったのでメモ</h2>

<p>UbuntuではWindowsのようにC,D,E&hellip;のようにドライブレターを付けて管理する方法をとっていないので、UbuntuのOSが入ったストレージ以外の外付けHDDなどは起動するたびに認識順番によってパスが変わってしまいます。<br/>
音楽データを再生ソフトにインポートするときに毎回パスが変わってしまうと不都合が起こるので、自分でマウントポイントを固定させています。</p>

<p>今日はその方法を簡単に紹介しておきます。</p>

<!-- more -->


<h2>Ubuntuのターミナルを開く</h2>

<p><code>sudo blkid</code>と入力します。<br/>
するとこんな感じの出力が得られます。</p>

<pre><code>sudo blkid
[sudo] password for ry0: 
/dev/sda2: UUID="7ab051c4-d59d-42da-abde-f2acc76e4456" TYPE="swap" 
/dev/sda3: UUID="dda8076d-7aa4-4f67-b8fb-c372d3b4f3d0" TYPE="ext4" 
/dev/sda5: UUID="217c6241-aab2-46d3-8cb7-ce45a8b7be67" TYPE="ext4" 
/dev/sdb1: UUID="90C6D54FC6D535E6" TYPE="ntfs" 
/dev/sdc2: LABEL="M-cM-^CM-^\M-cM-^CM-*M-cM-^CM-%M-cM-^CM-&lt;M-cM-^CM- " UUID="7C3654FC3475B7BA" TYPE="ntfs" 
/dev/sdd2: LABEL="M-cM-^CM-^\M-cM-^CM-*M-cM-^CM-%M-cM-^CM-&lt;M-cM-^CM- " UUID="567A23C67A58A3F1" TYPE="ntfs" 
/dev/sdl1: LABEL="M-cM-^CM--M-cM-^CM-&lt;M-cM-^BM-+M-cM-^CM-+ M-cM-^CM-^GM-cM-^BM-#M-cM-^BM-9M-cM-^BM-/" UUID="36FA567EFA2657A7" TYPE="ntfs"
</code></pre>

<p>そして固定したいストレージを見極めます。ファイラーでそこにアクセスするか、ターミナルで<code>ls</code>するなど、現時点でどれがどのストレージなのかをしっかり把握しておいてください。<br/>
固定したいものがわかったら、<code>UUID</code>の文字列をメモしておきます。</p>

<h2>/etc/fstabを編集</h2>

<p>エディタで<code>/etc/fstab</code>を編集します。</p>

<pre><code>sudo gedit /etc/fstab
</code></pre>

<p>そして最後の行に以下のような記述を追加します。ここでの記述は上で得られた<code>/dev/sdc2:/dev/sdd2:/dev/sdl1:</code>の<code>UUID</code>の結果を例に出しています。</p>

<pre><code>#Windows HDD
UUID="7C3654FC3475B7BA"   /mnt/hdd1     ntfs    defaults        0 0
UUID="567A23C67A58A3F1"   /mnt/hdd2     ntfs    defaults        0 0
UUID="36FA567EFA2657A7"   /mnt/hdd3     ntfs    defaults        0 0
</code></pre>

<p>しっかりUUIDの記述が間違っていないことを確認したら保存して、リブートします。<code>/mnt/hdd~</code>にマウントされていたら成功です。</p>

<h2>注意</h2>

<h3>マウントできない問題</h3>

<p>Windowsで使っているHDDをマウントさせようしてもマウントできないことがあります。<br/>
こういうときはWindows側でコントロールパネルから「電源オプション」を開き、「高速スタートアップを有効にする（推奨）」のチェックを外してください。<strong>上の設定をした状態で、これにチェックを入れるとUbuntuが起動できなくなります。</strong></p>

<h3>Ubuntuが起動できなくなった</h3>

<p>こういうときはUbuntuをインストールするときに使ったディスクを使って、ディスクからUbuntuを起動してください。<br/>
そしてUbuntuがインストールされているディスクの<code>/etc/fstab</code>にアクセスし、<strong>自分で記述した部分を削除してください。これでリセットできるはずです。</strong></p>

<h2>おわりに</h2>

<p>この設定でUbuntuのシステムだけSSDに置いて、音楽データや動画データなどはデュアルブートしてあるWindows側と共有するようにしています。<br/>
外付けのHDDでも同じことができるので、起動するたびにマウントポイントが変わって困っている人は試してみてください。</p>

<p><blockquote><p></p></p><p><div class="kaerebalink-box"><div class="kaerebalink-image"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00KD9641W/ry00c-22/ref=nosim/" target="_blank" ><img src="http://ecx.images-amazon.com/images/I/41OgsqjweFL._SL160_.jpg" style="border: none;" /></a></div><div class="kaerebalink-info"><div class="kaerebalink-name"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00KD9641W/ry00c-22/ref=nosim/" target="_blank" >HGST(エイチ・ジー・エス・ティー) Deskstar NAS 4TB パッケージ版 3.5インチ 7200rpm 64MBキャッシュ SATA 6Gb/s 【3年保証】 0S03667</a><div class="kaerebalink-powered-date">posted with <a href="http://kaereba.com" rel="nofollow" target="_blank">カエレバ</a></div></div><div class="kaerebalink-detail"> HGST Japan 2014-03-12    </div><div class="kaerebalink-link1"><div class="shoplinkamazon"><a href="http://www.amazon.co.jp/gp/search?keywords=HGST&__mk_ja_JP=%83J%83%5E%83J%83i&tag=ry00c-22" target="_blank" >Amazonで探す</a></div><div class="shoplinkrakuten"><a href="http://hb.afl.rakuten.co.jp/hgc/0e7c6e55.9d33cc01.0e7c6e56.d2bcd23e/?pc=http%3A%2F%2Fsearch.rakuten.co.jp%2Fsearch%2Fmall%2FHGST%2F-%2Ff.1-p.1-s.1-sf.0-st.A-v.2%3Fx%3D0%26scid%3Daf_ich_link_urltxt%26m%3Dhttp%3A%2F%2Fm.rakuten.co.jp%2F" target="_blank" >楽天市場で探す</a></div></div></div><div class="booklink-footer" style="clear: left"></div></div></p><p><br/><p></p></blockquote></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntuの画面録画が簡単にできるSimpleScreenRecorderのインストール方法と使い方]]></title>
    <link href="http://ry0.github.io/blog/2016/02/21/simplescreenrecorder/"/>
    <updated>2016-02-21T23:33:49+09:00</updated>
    <id>http://ry0.github.io/blog/2016/02/21/simplescreenrecorder</id>
    <content type="html"><![CDATA[<h2>シンプルだけどしっかり設定もできる</h2>

<p>Ubuntuで画面の録画をするときに何を使っていますか。<br/>
私は今までKazamというソフトウェアを使っていました。
Kazamもわかりやすくて使いやすいアプリです。しかしマルチモニターの環境だと上手く録画できなかったり、保存の際に保存画面が出ずに閉じられてしまうことがあったので別のアプリを探していました。</p>

<p>今日ブログで書くSimpleScreenRecorderはまさにそのとき見つけたアプリで、YoutubeにアップされているUbuntuのスクリーンキャプチャもこのアプリで録画されているものをちらほら見かけたので使ってみました。</p>

<!-- more -->


<h2>インストール</h2>

<p>Ubuntu 14.04の環境で試しています。<br/>
インストールは簡単で新たにリポジトリを追加してインストールするたけ。</p>

<pre><code class="bash">sudo add-apt-repository ppa:maarten-baert/simplescreenrecorder
sudo apt-get update
sudo apt-get install simplescreenrecorder
</code></pre>

<h2>実際につかってみる</h2>

<p>NVIDIAのグラボを使っていると以下のようなアラートがでました。親切に言ってくれているので言うとおりにYESを押しておきます。
「NVIDIA X Sercer Settings」を確認すると確かにその設定項目がありました。OpenGL SettingsのAllow Flippingです。</p>

<p><a class="swipebox" href="https://farm2.staticflickr.com/1539/24543853683_ea2fbde59b.jpg" title="">
  <img class="center image-effect" src="https://farm2.staticflickr.com/1539/24543853683_ea2fbde59b.jpg">
</a></p>

<p>続行を選択。</p>

<p><a class="swipebox" href="https://farm2.staticflickr.com/1611/25077441471_abe589f2c5_b.jpg" title="">
  <img class="center image-effect" src="https://farm2.staticflickr.com/1611/25077441471_abe589f2c5_b.jpg">
</a></p>

<p>映像入力でどこを録画するか決定します。全画面も任意の場所を選択する場合もどちらの場合もうまく録画できました。<br/>
音声は必要ない場合は「音声を記録」のチェック項目を外しておきます。</p>

<p><a class="swipebox" href="https://farm2.staticflickr.com/1549/25077441391_c43b73f576_b.jpg" title="">
  <img class="center image-effect" src="https://farm2.staticflickr.com/1549/25077441391_c43b73f576_b.jpg">
</a></p>

<p>保存場所を指定して、コンテナを「mp4」に。コーデックは「H.264」にしておきました。</p>

<p><a class="swipebox" href="https://farm2.staticflickr.com/1596/25052421612_b2e2d2f284_b.jpg" title="">
  <img class="center image-effect" src="https://farm2.staticflickr.com/1596/25052421612_b2e2d2f284_b.jpg">
</a></p>

<p>録画のスタートはデフォルトの設定の場合、<code>Ctrl + R</code>で開始されます。
ですのでSimpleScreenRecorderのウィンドウは最小化しておいて、ショートカットで開始させるとスムーズに目的の画面を録画することができると思います。
録画を終了するときも<code>Ctrl + R</code>で止めます。<br/>
「録画を保存」で指定した場所に保存されます。</p>

<p><a class="swipebox" href="https://farm2.staticflickr.com/1493/25077441161_dc916a9e61_b.jpg" title="">
  <img class="center image-effect" src="https://farm2.staticflickr.com/1493/25077441161_dc916a9e61_b.jpg">
</a></p>

<h2>おわりに</h2>

<p>今日は短めですが、たったこれだけでしっかりと画面録画できるのでこれからも使っていきたいアプリです。
PCに負荷がかかっているときの録画も途中で落ちることなく録画しておいてくれるのでなかなかいいですよ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Caffeを使って手書きのひらがなを識別する]]></title>
    <link href="http://ry0.github.io/blog/2015/11/16/caffe-handwriting-recognition/"/>
    <updated>2015-11-16T14:43:25+09:00</updated>
    <id>http://ry0.github.io/blog/2015/11/16/caffe-handwriting-recognition</id>
    <content type="html"><![CDATA[<h2>Caffeのネットワークの説明が不足していたので今日は詳しく説明します</h2>

<p>Caffeのネタはもう終わりにしようと思っていたのですが、少女時代のクラスタリングの話ではいまいち何をやっているのかわからないし、世の中に少女時代の区別がつくようになって嬉しい人がどれだけいるのか疑問だったので改めて違うテーマを使って説明していきたいと思います</p>

<p>今回は手書き文字認識をテーマに学習器の設定の仕方を書きたいと思います。<br/>
できるだけ他のテーマを対象とした画像クラスタリングにも使えるように説明していくのでよかったら見ていってください。</p>

<!-- more -->


<p>少女時代の顔認識の記事を見ていない人はこのまとめ記事をご覧ください。私がこれまでCaffeに関して書いた記事をリンクしています。</p>

<p><blockquote><p>これまでのCaffeの記事のまとめと補足</p><footer><strong>Ry0 Note <a href="http://ry0.github.io/blog/2015/09/30/using-summary-of-caffe/">http://ry0.github.io/blog/2015/09/30/using-summary-of-caffe/</a> <a href="http://ry0.github.io/blog/2015/09/30/using-summary-of-caffe/">http://ry0.github.io/blog/2015/09/30/using-summary-of-caffe/</a></strong></footer></blockquote></p>

<h2>まずワークスペースの確保</h2>

<p>caffeのフォルダの中に<code>examples</code>というフォルダがあると思います。ここに作ります。
学習モデルを作る際に、Cifar10の学習モデルを参考にするので、コピーしておきます。</p>

<pre><code class="bash">cd caffe/examples
mkdir &lt;自分が作りたい名前&gt;
cp cifar10/cifar10_quick* &lt;自分が作りたい名前&gt;
</code></pre>

<p>ここからはこの作成したフォルダの中で作業していきます。</p>

<h2>まずはデータセット作り</h2>

<p>これがないと学習を行うことができないので、既存のデータセットをどこかから持ってくるか、自分で作成してください。<br/>
<strong>データセット作りに関しても上のリンクで書いています。</strong><br/>
今回、ひらがなの手書き文字認識を例としているので、クラス数はひらがな（濁音半濁音を含む）の73文字をクラス数とします。
したがって「あ」から順に0から「ぽ」までの72です。</p>

<p><a class="swipebox" href="https://farm6.staticflickr.com/5788/22647859219_446acac384_b.jpg" title="データセットの作成">
  <img class="center image-effect" src="https://farm6.staticflickr.com/5788/22647859219_446acac384_b.jpg">
</a></p>

<p>これでleveldb形式の学習データとテストデータ<code>tegaki_cifar10_test_leveldb</code>と<code>tegaki_cifar10_train_leveldb</code>を作成しました。</p>

<p>平均画像の作成は</p>

<pre><code class="bash">cd ../../ #Caffeのフォルダの一番最初まで移動
build/tools/compute_image_mean.bin -backend=leveldb ./examples/handwriting_recognition/tegaki_cifar10_train_leveldb ./examples/handwriting_recognition/tegaki_mean.binaryproto
</code></pre>

<p>としました。成功すると<code>tegaki_mean.binaryproto</code>が<code>/examples/handwriting_recognition/</code>に生成されます。</p>

<h2>cifar10_quick_solver.prototxtの編集</h2>

<p><strong>赤字から緑の字に変更することを意味します。</strong><br/>
まず<code>cifar10_quick_solver.prototxt</code>から好きな名前に変更します。
<code>tegaki_cifar10_quick_solver.prototxt</code>としました。</p>

<pre><code class="diff"># reduce the learning rate after 8 epochs (4000 iters) by a factor of 10

# The train/test net protocol buffer definition
- net: "examples/cifar10/cifar10_quick_train_test.prototxt"
+ net: "examples/handwriting_recognition/tegaki_cifar10_quick_train_test.prototxt"
# test_iter specifies how many forward passes the test should carry out.
# In the case of MNIST, we have test batch size 100 and 100 test iterations,
# covering the full 10,000 testing images.
- test_iter: 100
+ test_iter: 20
# Carry out testing every 500 training iterations.
test_interval: 500
# The base learning rate, momentum and the weight decay of the network.
- base_lr: 0.001
+ base_lr: 0.0001
momentum: 0.9
weight_decay: 0.004
# The learning rate policy
lr_policy: "fixed"
# Display every 100 iterations
display: 100
# The maximum number of iterations
- max_iter: 4000
+ max_iter: 10000
# snapshot intermediate results
- snapshot: 4000
+ snapshot: 5000
- snapshot_prefix: "examples/cifar10/cifar10_quick"
+ snapshot_prefix: "examples/handwriting_recognition/tegaki_cifar10_quick_with_dropout"
# solver mode: CPU or GPU
solver_mode: GPU
</code></pre>

<ul>
<li><p>test_iter<br/>
学習中の正答率評価を1回行なうために使うデータ数をイテレーション単位で指定します。</p></li>
<li><p>base_lr<br/>
学習がどの程度一度に進めるかを表す数値で、小さいほど精度が良くなるとのことなので、一桁小さくしました。</p></li>
<li><p>max_iter<br/>
学習をおこなうイテレーション数です。Cifar10のモデルよりも多く設定しました。</p></li>
<li><p>snapshot<br/>
学習結果の途中経過を出力する頻度です。</p></li>
<li><p>snapshot_prefix<br/>
途中経過を出力するときの名前を指定します。</p></li>
<li><p>solver_mode<br/>
CPUを使う場合は変更してください。</p></li>
</ul>


<h2>cifar10_quick_train_test.prototxtの編集</h2>

<p>同様に変更します。
<code>cifar10_quick_train_test.prototxt</code>を<code>tegaki_cifar10_quick_train_test.prototxt</code>にリネームしました。</p>

<p>1行目からの変更分です。</p>

<pre><code class="diff">name: "CIFAR10_quick"
layer {
  name: "cifar"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
-    mean_file: "examples/cifar10/mean.binaryproto"
+    mean_file: "examples/handwriting_recognition/tegaki_mean.binaryproto"
  }
  data_param {
-    source: "examples/cifar10/cifar10_train_lmdb"
+    source: "examples/handwriting_recognition/tegaki_cifar10_train_leveldb"
    batch_size: 100
-    backend: LMDB
+    backend: LEVELDB
  }
}
layer {
  name: "cifar"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
-    mean_file: "examples/cifar10/mean.binaryproto"
+    mean_file: "examples/handwriting_recognition/tegaki_mean.binaryproto"
  }
  data_param {
-    source: "examples/cifar10/cifar10_test_lmdb"
+    source: "examples/handwriting_recognition/tegaki_cifar10_test_leveldb"
    batch_size: 100
-    backend: LMDB
+    backend: LEVELDB
  }
}
</code></pre>

<p><code>transform_param</code>の中にはデータセットをランダムにクロップする(例: <code>crop_size: 30</code>)とか左右反転して学習に用いる(例: <code>mirror: true</code>)を入れてデータの水増しができます。
今回は用いませんでしたが、少ないデータセットを有効に使うための工夫をいれてもいいでしょう。<br/>
ちなみに少女時代の学習モデルには使っているので参考にしてみてください。</p>

<div class="github-widget" data-repo="Ry0/snsd_classify"></div>


<p>162行目からの記述です。
<strong>過学習を防ぐためにドロップアウトを新たに入れています。</strong><br/>
一番重要なのは最後の<code>num_output:</code>で<strong>目的に応じたクラス数を記述するようにしてください。</strong><br/>
最後の修正点は、学習時の精度も確認できるようにする設定です。</p>

<pre><code class="diff">layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool3"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 64
    weight_filler {
      type: "gaussian"
      std: 0.1
    }
    bias_filler {
      type: "constant"
    }
  }
}
+layer {
+  name: "drop1"
+  type: "Dropout"
+  bottom: "ip1"
+  top: "drop1"
+  dropout_param {
+    dropout_ratio: 0.5
+  }
+}
layer {
  name: "ip2"
  type: "InnerProduct"
-  bottom: "ip1"
+  bottom: "drop1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
-    num_output: 10
+    num_output: 73
    weight_filler {
      type: "gaussian"
      std: 0.1
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
-  include {
-    phase: TEST
-  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
</code></pre>

<p>prototxtファイルからブロック図をpngで出力するコマンドがあります。</p>

<pre><code class="bash">python/draw_net.py examples/handwriting_recognition/tegaki_cifar10_quick_train_test.prototxt caffeNet.png --rankdir BT
</code></pre>

<p>全体像は画像をクリックしたら見れます。</p>

<p><a class="swipebox" href="https://farm6.staticflickr.com/5816/23040887602_0aa35d824a_h.jpg" title="ブロック図">
  <img class="center image-effect" src="https://farm6.staticflickr.com/5648/23065789381_6c6ba711f8_b.jpg">
</a></p>

<h2>cifar10_quick.prototxtの編集</h2>

<p><code>cifar10_quick.prototxt</code>を<code>tegaki_cifar10_quick.prototxt</code>にしました。</p>

<p>最後の出力だけ自分が出力したいクラス数に変更しました。</p>

<pre><code class="diff">layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
-    num_output: 10
+    num_output: 73
  }
}
layer {
  name: "prob"
  type: "Softmax"
  bottom: "ip2"
  top: "prob"
}
</code></pre>

<h2>学習の実行</h2>

<p>これで学習を実行します。エラーがでる場合はもう一度ファイルネームが間違っていないか確認してください。</p>

<pre><code class="bash">cd ../../ #Caffeのフォルダの一番最初まで移動
build/tools/caffe train --solver examples/handwriting_recognition/tegaki_cifar10_quick_solver.prototxt
</code></pre>

<h2>結果</h2>

<p>テストデータに関する精度は9割超えでまずまずの結果が得られました。</p>

<p><a class="swipebox" href="https://farm1.staticflickr.com/626/23041435945_24f301d1ab_z.jpg" title="学習結果">
  <img class="center image-effect" src="https://farm1.staticflickr.com/626/23041435945_24f301d1ab_z.jpg">
</a></p>

<h2>簡単なアプリを作成</h2>

<p>これだけでは面白くないので、OpenCVを使ってマウスで実際に字を書いて、それがひらがなの何かをCaffeに処理させるアプリを作りました。</p>

<div class="youtube-container image-effect">
  <iframe width="960" height="720" src="https://www.youtube.com/embed/rqCJgfitF8I?rel=0" frameborder="0" allowfullscreen></iframe>
</div>


<p>これらのすべてのソースコードと学習モデルはGithubに置いているので興味がある方はどうぞ</p>

<div class="github-widget" data-repo="Ry0/handwriting_recognition"></div>


<p>このアプリの実行方法はREADMEにも書いていますが</p>

<pre><code class="bash">cd handwriting_recognition/python
python handwriting-recognition.py
</code></pre>

<p>です。学習済みのCaffeモデルも置いてますので、データセットを用意しなくても結果だけ試すことができます。<br/>
ただしOpenCVが必要です。一応OpenCV 3.0でも動きます。</p>

<h2>おわりに</h2>

<p>できるだけ丁寧に書いたつもりでしたがどうでしょうか。
少しでも使い方が分かってもらえたら幸いです。
ひらがな文字認識のプログラム等が動かない場合はフィードバックください。</p>

<p>学習モデルも構築についてもっと何をやっているのか知りたくなった方はSIG2Dさんがアップしてくださっている資料を参考にしてください。<br/>
しっかり読んだら、私の記事を見るより絶対理解が深まるはずです。</p>

<p><blockquote><p>SIG2D’14 葉月ちゃんでも出来る Deep Learning</p><footer><strong>SIG2D <a href="http://sig2d.org/blog/2015/07/02/sig2d14/">http://sig2d.org/blog/2015/07/02/sig2d14/</a> <a href="http://sig2d.org/blog/2015/07/02/sig2d14/">http://sig2d.org/blog/2015/07/02/sig2d14/</a></strong></footer></blockquote></p>

<p>最近ではGoogleが出したTensorFlowのほうにみんなの興味が行ってるので、これからどうなるんでしょうねCaffeは。<br/>
時間があればTensorFlowの方も試したいと思います。<br/>
最後まで見ていただいてありがとうございました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UbuntuでSlackのクライアントソフトを使う]]></title>
    <link href="http://ry0.github.io/blog/2015/10/11/slack-client-for-ubuntu/"/>
    <updated>2015-10-11T04:01:48+09:00</updated>
    <id>http://ry0.github.io/blog/2015/10/11/slack-client-for-ubuntu</id>
    <content type="html"><![CDATA[<h2>UbuntuでSlackするには公式クライアントを使う？それともScudCloud？</h2>

<p>みなさんはSlackを使ってますか？<br/>
私は研究室内でのちょっとしたリンクやファイルの共有や、個人ではbotを作成して少女時代のInstagramの新着通知を受け取ったりと非常に便利で結構お世話になっています。
しかもちゃんとWindowsやMac、iPhone、Androidで各クライアントアプリが提供され、LINEやSkypeとはちょっと違った使い方ができるのが好きです。
しかし先ほど挙げたOSはサポートされていましたが、UbuntuなどのLinuxでは公式クライアントが提供されておらず、ブラウザかあとで紹介する「ScudCloud」を使うしかありませんでした。</p>

<p>最近になってようやくLinux版のクライアントのbeta版が公開されました。
今日は公式アプリとScudCloudのインストール方法、相違点や使い心地などを書いていこうと思います。</p>

<!-- more -->


<h2>まずは公式クライアントのインストール方法</h2>

<p>検証はUbuntu 14.04 64bitで行っています。</p>

<p>まずSlackの<a href="https://slack.com/downloads">ダウンロードリンク</a>に行ってdebファイルを落としてきます。
UbuntuとFedoraに対応しているようです。
<strong>Ubuntuの場合、自分の環境が32bitなのか64bitなのかを確認してダウンロードするファイルを選択するようにします。</strong></p>

<p><a href="https://slack.com/downloads" title="debファイルのダウンロード">
  <img class="center image-effect" src="https://farm6.staticflickr.com/5659/22061364462_6e6d43e2eb_b.jpg">
</a></p>

<p><code>slack-desktop-1.2.4-amd64.deb</code>のようなファイルがダウンロードされると思います。ファイルネームのバージョンを表す数字は試す時期によって変わっていると思います。<br/>
ダウンロードしてきたファイルをダブルクリックしてソフトウェアセンター経由でインストールするか、ターミナルでインストールを行います。</p>

<pre><code class="bash">sudo dpkg -i slack-desktop-*.deb #debファイルが保存されたディレクトリで実行
</code></pre>

<p>これでインストールは完了です。Ubuntuの左上のアイコンの検索窓から「Slack」で検索してみてください。<br/>
起動してログインしておきます。</p>

<h2>続いてScudCloud</h2>

<p>先ほどは公式のクライアントをインストールしました。続いてScudCloudのインストールです。
<strong>このアプリは興味のある人だけインストールしてください。</strong>
基本的に本家と同じなので。<br/>
Github上で開発が行われているようです。</p>

<div class="github-widget" data-repo="raelgc/scudcloud"></div>


<pre><code class="bash">sudo apt-add-repository ppa:rael-gc/scudcloud
sudo apt-get update
sudo apt-get install scudcloud
</code></pre>

<p>GithubのREADMEにも書かれていますが、アイコンを変えたい場合このようにします。</p>

<pre><code class="bash">sudo dpkg-divert --add --rename --divert /opt/scudcloud/resources/scudcloud.png.real /opt/scudcloud/resources/scudcloud.png
wget -O scudcloud.png https://slack.global.ssl.fastly.net/ba3c/img/icons/app-256.png
sudo mv scudcloud.png /opt/scudcloud/resources/
sudo chmod +r /opt/scudcloud/resources/scudcloud.png
</code></pre>

<h2>自動起動のセッティング</h2>

<p>Ubuntuが起動した時に自動でタスクトレイに格納された状態でこれらのクライアントが起動してくれるようにしておくと便利です。</p>

<h3>公式クライアントの場合</h3>

<p>「Preferences」で2つをチェックします。</p>

<p><a class="swipebox" href="https://farm6.staticflickr.com/5671/21451619854_5b4df36ddf_b.jpg" title="">
  <img class="center image-effect" src="https://farm6.staticflickr.com/5671/21451619854_5b4df36ddf_b.jpg">
</a></p>

<p>本来ならひとつ目のチェックで自動起動してくれるはずなんですが、<strong>うまくいかない場合、「自動起動するアプリケーション」でこのように設定します。</strong></p>

<p><a class="swipebox" href="https://farm6.staticflickr.com/5676/21887799189_b099caba37_z.jpg" title="">
  <img class="center image-effect" src="https://farm6.staticflickr.com/5676/21887799189_b099caba37_z.jpg">
</a></p>

<h3>ScudCloudの場合</h3>

<p>「自動起動するアプリケーション」で名前を「ScudCloud」、コマンドを<code>scudcloud --minimized=True</code>として設定しておきます。
そしてメニューからClose to Trayにします。</p>

<p><a class="swipebox" href="https://farm1.staticflickr.com/757/22048484576_545edf88ed_z.jpg" title="自動起動">
  <img class="center image-effect" src="https://farm1.staticflickr.com/757/22048484576_545edf88ed_z.jpg">
</a></p>

<h2>2つのクライアントの比較</h2>

<p>どちらもWebベースのアプリケーションですので基本的にUIはブラウザで開いた時のデザインと同じです。しかしブラウザ版とは異なり、どちらのアプリもアカウントの切り替えが視覚的にわかりやすくなっています。</p>

<p><a class="swipebox" href="https://farm6.staticflickr.com/5657/22085708411_4762b23406_b.jpg" title="アカウントの切り替え">
  <img class="center image-effect" src="https://farm6.staticflickr.com/5657/22085708411_4762b23406_b.jpg">
</a></p>

<p>また通知がくるところがクライアントソフトの良い所です。未読の通知のカウントが出る点はScudCloudのほうがいいですね。</p>

<p><a class="swipebox" href="https://farm6.staticflickr.com/5811/21888007998_97628b7c33_b.jpg" title="通知">
  <img class="center image-effect" src="https://farm6.staticflickr.com/5811/21888007998_97628b7c33_b.jpg">
</a></p>

<p>非公式ながらScudCloudは非常に完成度の高いアプリですが1点だけ使いづらいところがあります。
「Close to Tray」の設定した場合、どうやら仕様のようでどうすることもできませんが、新しい通知を見に行く時に少し面倒です。</p>

<p><a class="swipebox" href="https://farm6.staticflickr.com/5786/22075291935_6575917ba4_b.jpg" title="欠点">
  <img class="center image-effect" src="https://farm6.staticflickr.com/5786/22075291935_6575917ba4_b.jpg">
</a></p>

<p>図のようにLauncherにあるアイコンを押すことでScudCloudをすぐ開くことができません。
これはScudCloudを閉じてタスクトレイに格納しているときに起きます。</p>

<h2>おわりに</h2>

<p>Ubuntuでも公式のクライアントが使えるようになったので、ScudCloudはもうお役ご免になってしまいました。<br/>
ScudCloudも非常によく出来ており、バージョンアップも活発で使いやすかったのですが、公式が提供を始めたのでこの先開発がどうなるのかが少し心配です。<br/>
公式のほうもクライアント側の設定だけではUbuntu起動時に起動してくれない以外は全く問題ないので、こっちを使っていこうと思います。<br/>
Launcherの未読件数のバッジはわかりやすいので本家のほうでも採用してほしいですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[バックアップ用途にも最適、TOSHIBA 4TB 3.5インチ内蔵HDD (MD04ACA400)]]></title>
    <link href="http://ry0.github.io/blog/2015/10/08/toshiba-4tb-3-5inch-md04aca400/"/>
    <updated>2015-10-08T01:25:02+09:00</updated>
    <id>http://ry0.github.io/blog/2015/10/08/toshiba-4tb-3-5inch-md04aca400</id>
    <content type="html"><![CDATA[<h2>そろそろ大容量のHDDが欲しかった</h2>

<p>最近、MacBook AirをEl Capitanにクリーンインストールしました。
今まで当たり前に使っていた環境と同じ使い心地に戻すまで結構大変でした&hellip;
でもEl Capitan、はやくていいね(Yosemiteが遅すぎた)。</p>

<p>アップグレードをする前にTime Machineを使ってアップグレードする前の環境をバックアップしておきたかったのですが、適当なHDDがありませんでした。
そこで普段使っているデスクトップPCに搭載していた2TBをTime Machine用にまわして4TBにアップグレードしたという話です。</p>

<!-- more -->


<h2>今回購入したハードディスクは</h2>

<p>東芝製のHDDです。本当はHGST製が良かったのですが、思ったより高かったので興味本位であんまり買ったことがない東芝製にしました。
私のHDDの個人的な印象では<strong>HGST ≫ WD ≧ 東芝 ≧ Seagate > その他メーカー</strong>といった印象です。
Western Digitalでもよかったのですが、今回はあえて東芝製に。</p>

<p>バルク品でしたので、しっかりとしたパッケージは無く無地のダンボールで写真のような静電気防止袋に梱包された状態で届きました。
SATAケーブル等はついてません。</p>

<p>冒頭にも書きましたが4TBモデルで<strong>一応7200RPMでキャッシュは多めの128MB</strong>です。最近は64MBじゃなくて128MBがスタンダードなんですね。
Made in Philippinesでした。</p>

<p><a class="swipebox" href="https://farm6.staticflickr.com/5689/21399603033_c2c58a486a_h.jpg" title="開封前">
  <img class="center image-effect" src="https://farm6.staticflickr.com/5689/21399603033_6b427b989d_b.jpg">
</a></p>

<p>特にHDDのデザインがかっこいいってわけでもないので写真はこれぐらいにしておきます。</p>

<p><a class="swipebox" href="https://farm1.staticflickr.com/766/21832802190_6e63db3b4d_h.jpg" title="開封後">
  <img class="center image-effect" src="https://farm1.staticflickr.com/766/21832802190_9f25809f69_b.jpg">
</a></p>

<h2>CrystalDiskMarkによる速度測定</h2>

<p>CrystalDiskMarkで一応速度測定を行いました。
比較対象は<a href="http://www.amazon.co.jp/exec/obidos/ASIN/B004QMJ144/ry00c-22/ref=nosim/">HGSTの2TBの5年前くらいのモデル</a>と参考程度に<a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00DTPYT78/ry00c-22/ref=nosim/">Intel SSD 530</a>です。</p>

<h3>MD04ACA400 [4TB SATA600 7200]</h3>

<p><a class="swipebox" href="https://farm6.staticflickr.com/5675/21832600380_aa1575f3bf.jpg" title="MD04ACA400">
  <img class="center image-effect" src="https://farm6.staticflickr.com/5675/21832600380_aa1575f3bf.jpg">
</a></p>

<h3>HDS723020BLA642 [2TB SATA600 7200]</h3>

<p><a class="swipebox" href="https://farm1.staticflickr.com/754/22020770185_b5fa2acd18.jpg" title="HDS723020BLA642">
  <img class="center image-effect" src="https://farm1.staticflickr.com/754/22020770185_b5fa2acd18.jpg">
</a></p>

<h3>Intel SSD 530 Series SSDSC2BW240A4K5</h3>

<p><a class="swipebox" href="https://farm6.staticflickr.com/5700/21833849399_088dc68353.jpg" title="SSDSC2BW240A4K5">
  <img class="center image-effect" src="https://farm6.staticflickr.com/5700/21833849399_088dc68353.jpg">
</a></p>

<p>SSDに関しての速度比較は以下の記事で書いています。</p>

<p><blockquote><p>Samsung SSD 850 EVOが安くて結構速かった</p><footer><strong>Ry0 Note <a href="http://ry0.github.io/blog/2015/06/28/samsung-ssd-850-evo/">http://ry0.github.io/blog/2015/06/28/samsung-ssd-850-evo/</a> <a href="http://ry0.github.io/blog/2015/06/28/samsung-ssd-850-evo/">http://ry0.github.io/blog/2015/06/28/samsung-ssd-850-evo/</a></strong></footer></blockquote></p>

<p>総合するとHGSTの2TBの5年前くらいのモデルよりは<strong>概ね今回購入したHDDのほうが速い</strong>ようです。
そもそもHDDに速度はあまり求めていないので、まったく問題ありません。</p>

<h2>搭載した感じ</h2>

<p>とくにトラブルなく使用できています。
ディスクの管理で見たところ約3.7TBで認識されているのでちゃんと機能しています。</p>

<p><a class="swipebox" href="https://farm1.staticflickr.com/607/21833562488_b03ae6417b_b.jpg" title="ディスクの管理">
  <img class="center image-effect" src="https://farm1.staticflickr.com/607/21833562488_b03ae6417b_b.jpg">
</a></p>

<p>ただこのHDD、<strong>容量の大きいファイルにアクセスしたりするときに「カコカコ」と音がなる</strong>のであまり好きではありません。
音に関することは他のレビューでも見かけたので仕様だと思いますが、あまりいい音じゃないので精神衛生上よくないです。
そこらへんを気にする方は少し多くお金を払ってよいHDDを買うことをおすすめします。</p>

<h2>おわりに</h2>

<p>前から2TBじゃ音楽データやテレビの録画データなどでいっぱいになっていたので、4TBあると安心です。
しかし故障した時のショックも2倍になるので、こまめにバックアップをとっておこうと思います。</p>

<p><blockquote><p></p></p><p><div class="kaerebalink-box"><div class="kaerebalink-image"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00QIH31L4/ry00c-22/ref=nosim/" target="_blank" ><img src="http://ecx.images-amazon.com/images/I/51l8kmOsoHL._SL160_.jpg" style="border: none;" /></a></div><div class="kaerebalink-info"><div class="kaerebalink-name"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00QIH31L4/ry00c-22/ref=nosim/" target="_blank" >【Amazon.co.jp限定】TOSHIBA 4TB 3.5インチ内蔵 SATAハードディスクドライブ MD04ACA400/N 【フラストレーションフリーパッケージ】</a><div class="kaerebalink-powered-date">posted with <a href="http://kaereba.com" rel="nofollow" target="_blank">カエレバ</a></div></div><div class="kaerebalink-detail"> 東芝 2015-01-17    </div><div class="kaerebalink-link1"><div class="shoplinkamazon"><a href="http://www.amazon.co.jp/gp/search?keywords=MD04ACA400&__mk_ja_JP=%83J%83%5E%83J%83i&tag=ry00c-22" target="_blank" >Amazonで探す</a></div><div class="shoplinkrakuten"><a href="http://hb.afl.rakuten.co.jp/hgc/0e7c6e55.9d33cc01.0e7c6e56.d2bcd23e/?pc=http%3A%2F%2Fsearch.rakuten.co.jp%2Fsearch%2Fmall%2FMD04ACA400%2F-%2Ff.1-p.1-s.1-sf.0-st.A-v.2%3Fx%3D0%26scid%3Daf_ich_link_urltxt%26m%3Dhttp%3A%2F%2Fm.rakuten.co.jp%2F" target="_blank" >楽天市場で探す</a></div></div></div><div class="booklink-footer" style="clear: left"></div></div></p><p><br/><p></p></blockquote></p>
]]></content>
  </entry>
  
</feed>
